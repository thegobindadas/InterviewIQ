import { GoogleGenAI } from "@google/genai";
import dotenv from "dotenv";


dotenv.config({});


const GEMINI_API_KEY = process.env.GEMINI_API_KEY;


const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY });



export async function generateQuestions(role, experience) {
    try {
        const prompt = `
            You are a highly experienced technical interviewer with 15+ years of experience interviewing candidates for leading tech companies (FAANG, high-growth startups, and enterprise SaaS).  
            Generate 5 realistic, industry-standard mock interview questions tailored for a candidate applying for the role of "${role}" with "${experience}" years of experience.

            Follow **industry best practices** and ensure the questions:  
            - Are practical, scenario-driven, and reflect real-world challenges relevant to the ${role}.  
            - Evaluate **problem-solving skills, technical depth, and communication ability**.  
            - Are aligned with the experience level (${experience} years) — not too trivial, not overly senior.  
            - Progressively vary in difficulty, starting from foundational to more challenging.  
            - Cover a mix of **core technical knowledge, applied problem-solving, and role-specific scenarios**.  
            - Avoid trivia or overly theoretical questions.

            Return **only the 5 questions as plain text**, each on a new line, with no numbering, no explanations, and no extra formatting.
        `;


        const response = await ai.models.generateContent({
            model: "gemini-2.0-flash-001",
            contents: prompt,
        });


        const aiOutput = response.text

        if (!aiOutput.trim()) {
            throw new Error("No output generated by AI model.");
        }


        const questions = aiOutput
            .trim()
            .split("\n")
            .map(line => line.trim())
            .filter(line => line.length > 0);



        return questions;

    } catch (error) {
        console.error("Error generating questions: ", error);
        return [];
    }
}


export async function evaluateAnswer(question, answer) {
    try {
        const prompt = `
            You are a senior technical interviewer with 15+ years of experience evaluating candidates for top tech companies (FAANG, startups, and enterprise SaaS).  

            Evaluate the following response from a candidate:  
            Question: ${question}  
            Answer: ${answer}  

            Assess the answer on these criteria:  
            1. **Clarity** – Is the explanation well-structured, concise, and easy to understand?  
            2. **Technical Depth** – Does the response show strong knowledge, problem-solving ability, and role-specific expertise?  
            3. **Relevance** – Does the response directly address the question without unnecessary or off-topic content?  

            For your output, provide:  
            - **Constructive Feedback** (2–3 sentences, highlighting strengths, weaknesses, and suggestions for improvement).  
            - **Score out of 10** (integer, where 10 indicates an excellent, professional-level response).  

            Keep your tone professional, objective, and concise, as if reporting to a hiring panel.  
            Return the result in this exact format:  

            Feedback: <Your professional evaluation>  
            Score: <X>/10
        `;


        const response = await ai.models.generateContent({
            model: "gemini-2.0-flash-001",
            contents: prompt,
        });


        const aiOutput = response.text

        if (!aiOutput.trim()) {
            throw new Error("No output generated by AI model.");
        }


        const feedbackMatch = aiOutput.match(/Feedback:\s*([\s\S]*?)\s*Score:/);
        const feedback = feedbackMatch ? feedbackMatch[1].trim() : null;


        // Extract Score
        const scoreMatch = aiOutput.match(/Score:\s*(\d+)\/10/);
        const score = scoreMatch ? parseInt(scoreMatch[1], 10) : null;



        return { score, feedback};

    } catch (error) {
        console.error("Error evaluating answer: ", error);
        return { score: 0, feedback: "No feedback." };
    }
}